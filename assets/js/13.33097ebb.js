(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{232:function(e,a,r){"use strict";r.r(a);var t=r(0),i=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"razor-validation-helpers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#razor-validation-helpers","aria-hidden":"true"}},[e._v("#")]),e._v(" Razor Validation Helpers")]),r("ul",[r("li",[e._v("Methods on the "),r("code",[e._v("Validation")]),e._v(" property of the "),r("code",[e._v("WebPage")]),e._v(" base class applied to all Razor pages:\n"),r("ul",[r("li",[r("code",[e._v(".RequireField(string field, string errorMessage)")])]),r("li",[r("code",[e._v(".Add(string field, params IValidator[] validators)")]),e._v(" and "),r("code",[e._v(".Add(IEnumerable<string> fields, params IValidator[] validators)")])])])]),r("li",[e._v("Static methods on the "),r("code",[e._v("Validator")]),e._v(" factory class for creating different kinds of validators\n"),r("ul",[r("li",[r("code",[e._v(".StringLength(int maxLength, int minLength=0, string errorMessage = null)")])]),r("li",[r("code",[e._v(".Range(")]),e._v("double minValue, double maxValue, string errorMessage = null)`")]),r("li",[r("code",[e._v(".Decimal(string errorMessage = null)")])]),r("li",[r("code",[e._v(".Integer(string errorMessage = null)")])]),r("li",[r("code",[e._v(".Url(string errorMessage = null)")])]),r("li",[r("code",[e._v(".DateTime(string errorMessage = null)")])])])]),r("li",[r("code",[e._v("@Html.ValidationSummary()")]),e._v(" and "),r("code",[e._v("@Html.ValidationMessage()")])])]),r("h1",{attrs:{id:"showing-images"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#showing-images","aria-hidden":"true"}},[e._v("#")]),e._v(" Showing Images")]),r("div",{staticClass:"language-charp extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('@{\n    Page.Title = "Manage Categories";\n    Layout = "~/_SiteLayout.cshtml";\n\n    var db = Database.Open("NW");\n    var queryAllCategories = "SELECT CategoryID, CategoryName FROM Categories ORDER BY CategoryName";\n\n    string categoryId = "1";\n    var queryOneCategory = "SELECT CategoryID, CategoryName, Description, Picture, PictureMimeType FROM Categories WHERE CategoryID = @0";\n    var foundCategory = db.QuerySingle(queryOneCategory, categoryId);\n}\n\n<div>\n    <h1>Manage Categories</h1>\n\n    <img src="data:@foundCategory.PictureMimeType;base64,@Convert.ToBase64String(foundCategory.Picture)" />\n</div>\n')])])])])}],!1,null,null,null);a.default=i.exports}}]);