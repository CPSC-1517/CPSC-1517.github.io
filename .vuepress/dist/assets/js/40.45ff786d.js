(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{448:function(t,s,n){"use strict";n.r(s);var a=n(42),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"lesson-plan-day-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lesson-plan-day-2"}},[t._v("#")]),t._v(" Lesson Plan: Day 2")]),t._v(" "),n("p",[t._v("Objectives:")]),t._v(" "),n("p",[t._v("Discuss:")]),t._v(" "),n("ul",[n("li",[t._v("What is an object?")]),t._v(" "),n("li",[t._v("The Class and its components.")]),t._v(" "),n("li",[t._v("Properties Fully Implemented vs Auto implemented")])]),t._v(" "),n("p",[t._v("Code:")]),t._v(" "),n("ul",[n("li",[t._v("Create a Visual Studio solution using a console application.")]),t._v(" "),n("li",[t._v("Create a class: Die")])]),t._v(" "),n("p",[t._v("Resources: Student")]),t._v(" "),n("ul",[n("li",[t._v("Moodle site.")]),t._v(" "),n("li",[t._v("Object Review topic:")]),t._v(" "),n("li",[t._v("Url Programming Fundamentals: An Object-First Approach in C#")]),t._v(" "),n("li",[t._v("doc. Visual Studio Projects")]),t._v(" "),n("li",[t._v("ppt: Introduction to Visual Studio")]),t._v(" "),n("li",[t._v("pdf: OOP Basics")]),t._v(" "),n("li",[t._v("pdf: The ABCs of Classes and Objects")]),t._v(" "),n("li",[t._v("Resources: Instructor")]),t._v(" "),n("li",[t._v("Lesson 1: Review of coding an Object definition: Die")])]),t._v(" "),n("p",[t._v("Concepts:")]),t._v(" "),n("ul",[n("li",[t._v("An object: Class vs Instance")]),t._v(" "),n("li",[t._v("Encapsulation of data")]),t._v(" "),n("li",[t._v("Private vs Public")]),t._v(" "),n("li",[t._v("The outside user")]),t._v(" "),n("li",[t._v("Properties\n"),n("ul",[n("li",[t._v("Get")]),t._v(" "),n("li",[t._v("Set")])])]),t._v(" "),n("li",[t._v("Constructor")]),t._v(" "),n("li",[t._v("Methods")])]),t._v(" "),n("p",[n("img",{attrs:{src:"l-2-a.png",alt:""}})]),t._v(" "),n("p",[t._v("Coding:")]),t._v(" "),n("ul",[n("li",[t._v("Create a new visual studio solution: OOPsBasicReview")]),t._v(" "),n("li",[t._v("Create a console application: OOPsConsoleDriver")]),t._v(" "),n("li",[t._v("Create a class: Die")])]),t._v(" "),n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Die")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//create a new instance of the math object Random")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//this will be shared by each instance of Die")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//the instance of the Random object will be created when the")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//first instance of Die is created")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Random")]),t._v(" _rnd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//data member is required for the fully implemented property")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" _Sides"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token return-type class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" Sides\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//the get is used on the right side of an assignment operate")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// used in an expression")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//this is the sending of a value from the object instance to")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//somewhere else")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _Sides"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//the set is used to assign an incoming value to the data memeber")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//it is used on the left side of an assignment operate")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//the key word --\x3e value <-- contains the incoming data value")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//you can do validation within the set to check the domain of")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//your data")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//to indicate an error used throw new Exception(" your message")')]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//the set can be private which means that the data member")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//can only recieve a value from within the object instance ")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//itself via a constructor or a method (behaviour)")]),t._v("\n            _Sides "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//auto implemented property")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//no data member is explicitly declared for this property")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token return-type class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" FaceValue "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" _Color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token return-type class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Color\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" _Color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//test if the string is null or empty")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("IsNullOrEmpty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//there are two options that you can do here")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a) Throw an exception if the color is a required value")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Exception")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You must supply a color"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//b) set the private member to null if the")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   property is nullable")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//_Color = null;")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                _Color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//constructor")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//optional, if not supplied then the system default contructor")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// is used which will assign a value to your data member that")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//corresponds to the datatype default")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//you may have any number of constructors")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//if you code a constructor, you become responsible for all constructors")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//two typical constructors are the default and greedy")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NOTE: CONSTRUCTORS DO NOT HAVE A RETURN DATATYPE")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//default constructor mimics the system default")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Die")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//this constructor would be used when no values are")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//supplied at the time of instantiation")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// public Die theDice = new Die();")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//you can override the system datatype values by supplying")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//your own default values")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetSides")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"White"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//greedy constructor usually is setup to recieve a value for all")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//data members in your the object definition")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" Die "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" sides"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" facevalue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//it is a good practice to use the properties to assign")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//values to data members")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// public Die theDice = new Die(6,1,"White");')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetSides")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sides"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        FaceValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" facevalue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Color "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" color"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Behaviours (methods)")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a method to allow the user to change the number of sides (faces)")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//of the die")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//subroutine no return value; datatype void")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token return-type class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetSides")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" sides"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sides "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" sides "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Exception")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Invalid number of sides for the die"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Sides "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sides"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Roll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token return-type class-name"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Roll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//will be used to generate a new facevalue for the instance")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//the method in Random called .Next(inclusive lowest range value,")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//                                  exclusive higest range value)")]),t._v("\n        FaceValue "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _rnd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sides "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);